(()=>{"use strict";class e{constructor(e,t){this.projectName=e,this.todo_list=t}}const t=(()=>{let t=[];return{makeProject:function(o,n){let c=new e(o,n);var r;t.push(c),console.log({projectList:t}),r=c,localStorage.setItem("projects",JSON.stringify(r))},changeName:function(e,o){t[o].projectName=e},removeProject:function(e){t.splice(e,i)},getProject:function(){return JSON.parse(localStorage.getItem("projects"))}}})(),o=(()=>{const e=document.querySelector("#projects-container");function o(t){const o=document.createElement("div"),n=document.createElement("div"),c=document.createElement("button"),r=document.createElement("button");o.classList.add("project"),c.classList.add("btn"),r.classList.add("btn"),c.textContent="E",r.textContent="X",n.textContent=t,o.appendChild(n),o.appendChild(c),o.appendChild(r),e.appendChild(o)}return document.querySelector("#add-project").addEventListener("submit",(e=>{e.preventDefault();const n=document.querySelector(".project-name");var c;o(n.value),c=n.value,t.makeProject(c,[]),n.value=""})),{addProject:o,saves:function(){let e=t.getProject();for(let t=0;t<e.length;t++)o(e[t].projectName),console.log(e[t].projectName)}}})();console.log("test"),o.saves()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iZXR0ZXItdG9kby1saXN0Ly4vc3JjL3Byb2plY3QtbG9naWMuanMiLCJ3ZWJwYWNrOi8vYmV0dGVyLXRvZG8tbGlzdC8uL3NyYy9wcm9qZWN0LWRvbS5qcyIsIndlYnBhY2s6Ly9iZXR0ZXItdG9kby1saXN0Ly4vc3JjL3Rlc3QuanMiLCJ3ZWJwYWNrOi8vYmV0dGVyLXRvZG8tbGlzdC8uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJQcm9qZWN0IiwiY29uc3RydWN0b3IiLCJwcm9qZWN0TmFtZSIsInRvZG9fbGlzdCIsInRoaXMiLCJwcm9qZWN0TGlzdCIsIm1ha2VQcm9qZWN0Iiwib2JqIiwicHJvamVjdCIsInB1c2giLCJjb25zb2xlIiwibG9nIiwibG9jYWxTdG9yYWdlIiwic2V0SXRlbSIsIkpTT04iLCJzdHJpbmdpZnkiLCJjaGFuZ2VOYW1lIiwibmV3TmFtZSIsImluZGV4IiwicmVtb3ZlUHJvamVjdCIsInNwbGljZSIsImkiLCJnZXRQcm9qZWN0IiwicGFyc2UiLCJnZXRJdGVtIiwicHJvamVjdENvbnRhaW5lciIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImFkZFByb2plY3QiLCJpbnB1dE5hbWUiLCJjcmVhdGVFbGVtZW50IiwiZWRpdCIsImRlbCIsImNsYXNzTGlzdCIsImFkZCIsInRleHRDb250ZW50IiwiYXBwZW5kQ2hpbGQiLCJhZGRFdmVudExpc3RlbmVyIiwiZSIsInByZXZlbnREZWZhdWx0IiwicHJvamVjdFRleHQiLCJ2YWx1ZSIsInNhdmVzIiwic2F2ZWRMaXN0IiwibGVuZ3RoIl0sIm1hcHBpbmdzIjoibUJBQUEsTUFBTUEsRUFDTEMsWUFBWUMsRUFBYUMsR0FDeEJDLEtBQUtGLFlBQWNBLEVBQ25CRSxLQUFLRCxVQUFZQSxHQUluQixNQTZCQSxFQTdCcUIsTUFDcEIsSUFBSUUsRUFBYyxHQXlCbEIsTUFBTyxDQUFFQyxZQWZULFNBQXFCSixFQUFhQyxHQUNqQyxJQUFJSSxFQUFNLElBQUlQLEVBQVFFLEVBQWFDLEdBVHBDLElBQXFCSyxFQVVwQkgsRUFBWUksS0FBS0YsR0FDakJHLFFBQVFDLElBQUksQ0FBRU4sZ0JBWE1HLEVBWVJELEVBWFpLLGFBQWFDLFFBQVEsV0FBWUMsS0FBS0MsVUFBVVAsS0FzQjNCUSxXQUp0QixTQUFvQkMsRUFBU0MsR0FDNUJiLEVBQVlhLEdBQU9oQixZQUFjZSxHQUdBRSxjQVJsQyxTQUF1QkQsR0FDdEJiLEVBQVllLE9BQU9GLEVBQU9HLElBT3NCQyxXQW5CakQsV0FDQyxPQUFPUixLQUFLUyxNQUFNWCxhQUFhWSxRQUFRLGdCQVJwQixHQzJDckIsRUFoRG1CLE1BQ2xCLE1BQU1DLEVBQW1CQyxTQUFTQyxjQUFjLHVCQW1CaEQsU0FBU0MsRUFBV0MsR0FDbkIsTUFBTXJCLEVBQVVrQixTQUFTSSxjQUFjLE9BQ2pDNUIsRUFBY3dCLFNBQVNJLGNBQWMsT0FDckNDLEVBQU9MLFNBQVNJLGNBQWMsVUFDOUJFLEVBQU1OLFNBQVNJLGNBQWMsVUFFbkN0QixFQUFReUIsVUFBVUMsSUFBSSxXQUN0QkgsRUFBS0UsVUFBVUMsSUFBSSxPQUNuQkYsRUFBSUMsVUFBVUMsSUFBSSxPQUNsQkgsRUFBS0ksWUFBYyxJQUNuQkgsRUFBSUcsWUFBYyxJQUVsQmpDLEVBQVlpQyxZQUFjTixFQUUxQnJCLEVBQVE0QixZQUFZbEMsR0FDcEJNLEVBQVE0QixZQUFZTCxHQUNwQnZCLEVBQVE0QixZQUFZSixHQUVwQlAsRUFBaUJXLFlBQVk1QixHQU85QixPQTNDb0JrQixTQUFTQyxjQUFjLGdCQUUvQlUsaUJBQWlCLFVBQVdDLElBQ3ZDQSxFQUFFQyxpQkFDRixNQUFNQyxFQUFjZCxTQUFTQyxjQUFjLGlCQW1DNUMsSUFBMkJ6QixFQWxDMUIwQixFQUFXWSxFQUFZQyxPQWtDR3ZDLEVBakNSc0MsRUFBWUMsTUFrQzlCLGNBQXlCdkMsRUFBYSxJQWpDdENzQyxFQUFZQyxNQUFRLE1Bb0NkLENBQUViLGFBQVljLE1BakNyQixXQUNDLElBQUlDLEVBQVksZUFDaEIsSUFBSyxJQUFJdEIsRUFBSSxFQUFHQSxFQUFJc0IsRUFBVUMsT0FBUXZCLElBQ3JDTyxFQUFXZSxFQUFVdEIsR0FBR25CLGFBQ3hCUSxRQUFRQyxJQUFJZ0MsRUFBVXRCLEdBQUduQixnQkFoQlQsR0NEbEJRLFFBQVFDLElBQUksUUNJYixXIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBQcm9qZWN0IHtcblx0Y29uc3RydWN0b3IocHJvamVjdE5hbWUsIHRvZG9fbGlzdCkge1xuXHRcdHRoaXMucHJvamVjdE5hbWUgPSBwcm9qZWN0TmFtZTtcblx0XHR0aGlzLnRvZG9fbGlzdCA9IHRvZG9fbGlzdDtcblx0fVxufVxuXG5jb25zdCBwcm9qZWN0TG9naWMgPSAoKCkgPT4ge1xuXHRsZXQgcHJvamVjdExpc3QgPSBbXTtcblxuXHRmdW5jdGlvbiBzYXZlUHJvamVjdChwcm9qZWN0KSB7XG5cdFx0bG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJwcm9qZWN0c1wiLCBKU09OLnN0cmluZ2lmeShwcm9qZWN0KSk7XG5cdH1cblxuXHRmdW5jdGlvbiBnZXRQcm9qZWN0KCkge1xuXHRcdHJldHVybiBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwicHJvamVjdHNcIikpO1xuXHR9XG5cblx0ZnVuY3Rpb24gbWFrZVByb2plY3QocHJvamVjdE5hbWUsIHRvZG9fbGlzdCkge1xuXHRcdGxldCBvYmogPSBuZXcgUHJvamVjdChwcm9qZWN0TmFtZSwgdG9kb19saXN0KTtcblx0XHRwcm9qZWN0TGlzdC5wdXNoKG9iaik7XG5cdFx0Y29uc29sZS5sb2coeyBwcm9qZWN0TGlzdCB9KTtcblx0XHRzYXZlUHJvamVjdChvYmopO1xuXHR9XG5cblx0ZnVuY3Rpb24gcmVtb3ZlUHJvamVjdChpbmRleCkge1xuXHRcdHByb2plY3RMaXN0LnNwbGljZShpbmRleCwgaSk7XG5cdH1cblxuXHRmdW5jdGlvbiBjaGFuZ2VOYW1lKG5ld05hbWUsIGluZGV4KSB7XG5cdFx0cHJvamVjdExpc3RbaW5kZXhdLnByb2plY3ROYW1lID0gbmV3TmFtZTtcblx0fVxuXG5cdHJldHVybiB7IG1ha2VQcm9qZWN0LCBjaGFuZ2VOYW1lLCByZW1vdmVQcm9qZWN0LCBnZXRQcm9qZWN0IH07XG59KSgpO1xuXG5leHBvcnQgZGVmYXVsdCBwcm9qZWN0TG9naWM7XG4iLCJpbXBvcnQgcHJvamVjdExvZ2ljIGZyb20gXCIuL3Byb2plY3QtbG9naWMuanNcIjtcblxuY29uc3QgcHJvamVjdERPTSA9ICgoKSA9PiB7XG5cdGNvbnN0IHByb2plY3RDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Byb2plY3RzLWNvbnRhaW5lclwiKTtcblx0Y29uc3QgcHJvamVjdEZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2FkZC1wcm9qZWN0XCIpO1xuXG5cdHByb2plY3RGb3JtLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgKGUpID0+IHtcblx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0Y29uc3QgcHJvamVjdFRleHQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnByb2plY3QtbmFtZVwiKTtcblx0XHRhZGRQcm9qZWN0KHByb2plY3RUZXh0LnZhbHVlKTtcblx0XHRhZGRQcm9qZWN0VG9BcnJheShwcm9qZWN0VGV4dC52YWx1ZSk7XG5cdFx0cHJvamVjdFRleHQudmFsdWUgPSBcIlwiO1xuXHR9KTtcblxuXHRmdW5jdGlvbiBzYXZlcygpIHtcblx0XHRsZXQgc2F2ZWRMaXN0ID0gcHJvamVjdExvZ2ljLmdldFByb2plY3QoKTtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHNhdmVkTGlzdC5sZW5ndGg7IGkrKykge1xuXHRcdFx0YWRkUHJvamVjdChzYXZlZExpc3RbaV0ucHJvamVjdE5hbWUpO1xuXHRcdFx0Y29uc29sZS5sb2coc2F2ZWRMaXN0W2ldLnByb2plY3ROYW1lKTtcblx0XHR9XG5cdH1cblxuXHRmdW5jdGlvbiBhZGRQcm9qZWN0KGlucHV0TmFtZSkge1xuXHRcdGNvbnN0IHByb2plY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXHRcdGNvbnN0IHByb2plY3ROYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0XHRjb25zdCBlZGl0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcblx0XHRjb25zdCBkZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuXG5cdFx0cHJvamVjdC5jbGFzc0xpc3QuYWRkKFwicHJvamVjdFwiKTtcblx0XHRlZGl0LmNsYXNzTGlzdC5hZGQoXCJidG5cIik7XG5cdFx0ZGVsLmNsYXNzTGlzdC5hZGQoXCJidG5cIik7XG5cdFx0ZWRpdC50ZXh0Q29udGVudCA9IFwiRVwiO1xuXHRcdGRlbC50ZXh0Q29udGVudCA9IFwiWFwiO1xuXG5cdFx0cHJvamVjdE5hbWUudGV4dENvbnRlbnQgPSBpbnB1dE5hbWU7XG5cblx0XHRwcm9qZWN0LmFwcGVuZENoaWxkKHByb2plY3ROYW1lKTtcblx0XHRwcm9qZWN0LmFwcGVuZENoaWxkKGVkaXQpO1xuXHRcdHByb2plY3QuYXBwZW5kQ2hpbGQoZGVsKTtcblxuXHRcdHByb2plY3RDb250YWluZXIuYXBwZW5kQ2hpbGQocHJvamVjdCk7XG5cdH1cblxuXHRmdW5jdGlvbiBhZGRQcm9qZWN0VG9BcnJheShwcm9qZWN0TmFtZSkge1xuXHRcdHByb2plY3RMb2dpYy5tYWtlUHJvamVjdChwcm9qZWN0TmFtZSwgW10pO1xuXHR9XG5cblx0cmV0dXJuIHsgYWRkUHJvamVjdCwgc2F2ZXMgfTtcbn0pKCk7XG5cbmV4cG9ydCBkZWZhdWx0IHByb2plY3RET007XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0ZXN0KCkge1xuXHRjb25zb2xlLmxvZyhcInRlc3RcIik7XG59XG4iLCJpbXBvcnQgdGVzdCBmcm9tIFwiLi90ZXN0LmpzXCI7XG5pbXBvcnQgcHJvamVjdExvZ2ljIGZyb20gXCIuL3Byb2plY3QtbG9naWMuanNcIjtcbmltcG9ydCBwcm9qZWN0RE9NIGZyb20gXCIuL3Byb2plY3QtZG9tLmpzXCI7XG5cbnRlc3QoKTtcbnByb2plY3RET00uc2F2ZXMoKTtcbnByb2plY3RET007XG4iXSwic291cmNlUm9vdCI6IiJ9